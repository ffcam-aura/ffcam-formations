generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model disciplines {
  id                            Int                             @id @default(autoincrement())
  nom                           String                          @unique(map: "disciplines_nom_unique") @db.VarChar(100)
  created_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  formations                    formations[]
  user_notification_preferences user_notification_preferences[]
}

model formations {
  id                    Int                    @id @default(autoincrement())
  reference             String                 @unique @db.VarChar(50)
  titre                 String                 @db.VarChar(255)
  discipline_id         Int?
  information_stagiaire String?
  nombre_participants   Int
  places_restantes      Int?
  hebergement_id        Int?
  tarif                 Decimal?               @db.Decimal(10, 2)
  lieu_id               Int?
  organisateur          String                 @db.VarChar(255)
  responsable           String                 @db.VarChar(255)
  email_contact         String?                @db.VarChar(255)
  first_seen_at         DateTime?              @default(now()) @db.Timestamptz(6)
  last_seen_at          DateTime?              @default(now()) @db.Timestamptz(6)
  status                String?                @default("active") @db.VarChar(50)
  created_at            DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?              @default(now()) @db.Timestamptz(6)
  disciplines           disciplines?           @relation(fields: [discipline_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  types_hebergement     types_hebergement?     @relation(fields: [hebergement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lieux                 lieux?                 @relation(fields: [lieu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  formations_dates      formations_dates[]
  formations_documents  formations_documents[]

  @@index([discipline_id], map: "idx_formations_discipline")
  @@index([lieu_id], map: "idx_formations_lieu")
  @@index([reference], map: "idx_formations_reference")
}

model formations_dates {
  id           Int         @id @default(autoincrement())
  formation_id Int?
  date_debut   DateTime    @db.Date
  date_fin     DateTime?   @db.Date
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  formations   formations? @relation(fields: [formation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([date_debut], map: "idx_formations_dates_debut")
  @@index([formation_id], map: "idx_formations_dates_formation")
}

model formations_documents {
  id           Int         @id @default(autoincrement())
  formation_id Int?
  type         String?     @db.VarChar(50)
  nom          String      @db.VarChar(255)
  url          String      @db.VarChar(255)
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  formations   formations? @relation(fields: [formation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([formation_id], map: "idx_formations_documents_formation")
}

model lieux {
  id          Int          @id @default(autoincrement())
  nom         String       @unique(map: "lieux_nom_unique") @db.VarChar(255)
  departement String?      @db.VarChar(3)
  created_at  DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?    @default(now()) @db.Timestamptz(6)
  formations  formations[]
}

model types_hebergement {
  id         Int          @id @default(autoincrement())
  nom        String       @unique(map: "types_hebergement_nom_unique") @db.VarChar(100)
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @default(now()) @db.Timestamptz(6)
  formations formations[]
}

model user_notification_preferences {
  id                 Int               @id @default(autoincrement())
  user_preference_id Int?
  discipline_id      Int?
  enabled            Boolean?          @default(true)
  last_notified_at   DateTime?         @db.Timestamptz(6)
  created_at         DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @default(now()) @db.Timestamptz(6)
  disciplines        disciplines?      @relation(fields: [discipline_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_preferences   user_preferences? @relation(fields: [user_preference_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_preference_id, discipline_id])
}

model user_preferences {
  id                            Int                             @id @default(autoincrement())
  user_id                       String                          @unique
  email                         String
  created_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  user_notification_preferences user_notification_preferences[]
}
